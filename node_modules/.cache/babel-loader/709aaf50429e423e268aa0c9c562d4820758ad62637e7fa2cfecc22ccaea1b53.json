{"ast":null,"code":"var _jsxFileName = \"D:\\\\Crio\\\\expense_tracker\\\\src\\\\components\\\\Barchart.js\";\nimport React from 'react';\nimport { Bar, BarChart, Cell, Legend, Tooltip, XAxis, YAxis } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Barchart = ({\n  userData,\n  activeIndex\n}) => {\n  const categoryExpenses = {};\n  userData.expenses.forEach(expense => {\n    const {\n      category,\n      amount\n    } = expense;\n    if (categoryExpenses[category]) {\n      categoryExpenses[category] += amount;\n    } else {\n      categoryExpenses[category] = amount;\n    }\n  });\n  console.log(categoryExpenses);\n  const aggregatedData = Object.keys(categoryExpenses).map(category => ({\n    category,\n    amount: categoryExpenses[category]\n  }));\n  console.log(aggregatedData);\n  const sortedExpenses = aggregatedData.sort((a, b) => b.amount - a.amount);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(BarChart, {\n      width: 250,\n      height: 250,\n      data: sortedExpenses,\n      children: [/*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        dataKey: \"amount\",\n        fill: \"#8884d8\",\n        children: sortedExpenses.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n          cursor: \"pointer\"\n        }, `cell-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n_c = Barchart;\nexport default Barchart;\nvar _c;\n$RefreshReg$(_c, \"Barchart\");","map":{"version":3,"names":["React","Bar","BarChart","Cell","Legend","Tooltip","XAxis","YAxis","jsxDEV","_jsxDEV","Barchart","userData","activeIndex","categoryExpenses","expenses","forEach","expense","category","amount","console","log","aggregatedData","Object","keys","map","sortedExpenses","sort","a","b","children","width","height","data","dataKey","fileName","_jsxFileName","lineNumber","columnNumber","fill","entry","index","cursor","_c","$RefreshReg$"],"sources":["D:/Crio/expense_tracker/src/components/Barchart.js"],"sourcesContent":["import React from 'react';\r\nimport { Bar, BarChart, Cell, Legend, Tooltip, XAxis, YAxis } from 'recharts';\r\n\r\nconst Barchart = ({userData, activeIndex }) => {\r\n\r\n    const categoryExpenses = {};\r\n    userData.expenses.forEach(expense => {\r\n        const { category, amount } = expense;\r\n        if (categoryExpenses[category]) {\r\n            categoryExpenses[category] += amount;\r\n        } else {\r\n            categoryExpenses[category] = amount;\r\n        }\r\n    });\r\n    console.log(categoryExpenses)\r\n\r\n    const aggregatedData = Object.keys(categoryExpenses).map(category => ({\r\n        category,\r\n        amount: categoryExpenses[category]\r\n    }));\r\n    console.log(aggregatedData)\r\n    const sortedExpenses = aggregatedData.sort((a, b) => b.amount - a.amount);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <BarChart width={250} height={250} data={sortedExpenses}>\r\n           \r\n                \r\n                <XAxis  dataKey=\"category\"  />\r\n                <YAxis  />\r\n                <Tooltip />\r\n                <Bar dataKey=\"amount\" fill=\"#8884d8\" >\r\n                    {sortedExpenses.map((entry, index) => (\r\n                        <Cell cursor=\"pointer\" key={`cell-${index}`}  />\r\n                    ))}\r\n                </Bar>\r\n            </BarChart>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Barchart;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,GAAG,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,MAAM,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,QAAQ,GAAGA,CAAC;EAACC,QAAQ;EAAEC;AAAY,CAAC,KAAK;EAE3C,MAAMC,gBAAgB,GAAG,CAAC,CAAC;EAC3BF,QAAQ,CAACG,QAAQ,CAACC,OAAO,CAACC,OAAO,IAAI;IACjC,MAAM;MAAEC,QAAQ;MAAEC;IAAO,CAAC,GAAGF,OAAO;IACpC,IAAIH,gBAAgB,CAACI,QAAQ,CAAC,EAAE;MAC5BJ,gBAAgB,CAACI,QAAQ,CAAC,IAAIC,MAAM;IACxC,CAAC,MAAM;MACHL,gBAAgB,CAACI,QAAQ,CAAC,GAAGC,MAAM;IACvC;EACJ,CAAC,CAAC;EACFC,OAAO,CAACC,GAAG,CAACP,gBAAgB,CAAC;EAE7B,MAAMQ,cAAc,GAAGC,MAAM,CAACC,IAAI,CAACV,gBAAgB,CAAC,CAACW,GAAG,CAACP,QAAQ,KAAK;IAClEA,QAAQ;IACRC,MAAM,EAAEL,gBAAgB,CAACI,QAAQ;EACrC,CAAC,CAAC,CAAC;EACHE,OAAO,CAACC,GAAG,CAACC,cAAc,CAAC;EAC3B,MAAMI,cAAc,GAAGJ,cAAc,CAACK,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACV,MAAM,GAAGS,CAAC,CAACT,MAAM,CAAC;EAGzE,oBACIT,OAAA;IAAAoB,QAAA,eACIpB,OAAA,CAACP,QAAQ;MAAC4B,KAAK,EAAE,GAAI;MAACC,MAAM,EAAE,GAAI;MAACC,IAAI,EAAEP,cAAe;MAAAI,QAAA,gBAGpDpB,OAAA,CAACH,KAAK;QAAE2B,OAAO,EAAC;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAC9B5B,OAAA,CAACF,KAAK;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACV5B,OAAA,CAACJ,OAAO;QAAA6B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACX5B,OAAA,CAACR,GAAG;QAACgC,OAAO,EAAC,QAAQ;QAACK,IAAI,EAAC,SAAS;QAAAT,QAAA,EAC/BJ,cAAc,CAACD,GAAG,CAAC,CAACe,KAAK,EAAEC,KAAK,kBAC7B/B,OAAA,CAACN,IAAI;UAACsC,MAAM,EAAC;QAAS,GAAO,QAAOD,KAAM,EAAC;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAClD;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAEd,CAAC;AAACK,EAAA,GArCIhC,QAAQ;AAuCd,eAAeA,QAAQ;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}